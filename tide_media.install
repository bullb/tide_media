<?php

/**
 * @file
 * Tide Media install.
 */

use Drupal\embed\Entity\EmbedButton;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\field\Entity\FieldConfig;
use Drupal\file\Entity\File;
use Drupal\media\Entity\Media;
use Drupal\taxonomy\Entity\Term;

/**
 * Implements hook_install().
 */
function tide_media_install() {
  // Set the icon for Media Browser button in CKEditor.
  $icon = \Drupal::moduleHandler()->getModule('tide_media')->getPath() . '/images/star.png';

  $destination = \Drupal::config('media.settings')->get('icon_base_uri');
  file_prepare_directory($destination, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);

  /** @var \Drupal\Core\File\FileSystem $fs */
  $fs = \Drupal::service('file_system');
  $icon_destination = file_unmanaged_copy($icon, $destination . DIRECTORY_SEPARATOR . $fs->basename($icon));

  if ($icon_destination) {
    $file = File::create(['uri' => $icon_destination]);
    $file->uid = 1;
    $file->save();

    EmbedButton::load('tide_media')
      ->set('icon_uuid', $file->uuid())
      ->save();
  }
}

/**
 * SDPA-309: Associated current media items to Creative Commons Attribution 4.0.
 */
function tide_media_update_8002() {
  $field_name = 'field_media_license';
  $bundle_names = ["audio", "document", "embedded_video", "file", "image", "video"];
  // First, lets find all media entities that still use old license field value.
  $existingMedia = \Drupal::entityQuery('media')
    ->exists($field_name)
    ->execute();
  if ($existingMedia && count($existingMedia)) {
    // At this point we know there is media that uses old license field.
    // Import the replacement field configuration.
    module_load_include('inc', 'tide_core', 'includes/helpers');
    $config_location = [drupal_get_path('module', 'tide_media') . '/config/install'];
    // Import new vocabulary.
    _tide_import_single_config('taxonomy.vocabulary.license_type', $config_location, TRUE);
    // Import new field storage config.
    _tide_import_single_config('field.storage.media.field_license_type', $config_location, TRUE);

    foreach ($bundle_names as $bundle) {
      _tide_import_single_config('field.field.media.' . $bundle . '.field_license_type', $config_location, TRUE);
      _tide_import_single_config('core.entity_form_display.media.' . $bundle . '.default', $config_location, TRUE);
      _tide_import_single_config('core.entity_view_display.media.' . $bundle . '.default', $config_location, TRUE);
      // Now this is a bit tricky. We might have display config for each type of
      // media entity. Lets loops through them all and if it exists in then
      // install config then import it.
      // call the entity service.
      $mediaEntity = \Drupal::service('entity_display.repository');
      // call the necessary method in order to return 'node' view modes.
      foreach ($mediaEntity->getViewModes('media') as $display => $value) {
        if (file_exists('core.entity_view_display.media.' . $bundle . '.' . $display . '.yml')) {
          _tide_import_single_config('core.entity_view_display.media.' . $bundle . '.default', $config_location, TRUE);
        }
      }
    }
    // Given there was only one allowed value for that field, we can just
    // explicitly create a new term to replace it. But before that lets check
    // if it already exists.
    $termId = NULL;
    $term = \Drupal::entityTypeManager()
      ->getStorage('taxonomy_term')
      ->loadByProperties([
        'name' => 'Copyright',
        'vid' => 'license_type',
      ]);

    // Its possible there might be some duplicates, just to be safe lets reset
    // the array.
    $term = reset($term);
    if (!$term) {
      $term = Term::create([
        'name' => 'Copyright',
        'vid' => 'license_type',
      ]);
      $term->save();
    }
    // Extract our term ID.
    $termId = $term->tid;

    if ($termId) {
      /** @var \Drupal\media\Entity\Media $media */
      foreach ($existingMedia as $mediaId) {
        $media = Media::load($mediaId);
        $media->set('field_license_type', $termId);
        $media->set($field_name, NULL);
        $media->save();
      }
      // OK, now we should have no entities with old license field values.
      // Lets remove the field now.
      foreach ($bundle_names as $bundle) {
        $field = FieldConfig::loadByName('media', $bundle, $field_name);
        if (!empty($field)) {
          $field->delete();
          // Also remove the field configuration.
          _tide_delete_config('field.field.media.' . $bundle . '.' . $field_name, [], TRUE);
        }
      }
      // Now remove field storage.
      $field_storage = FieldStorageConfig::loadByName('media', $field_name);
      if (!empty($field_storage)) {
        $field_storage->delete();
      }
      // And finally, remove field storage config.
      _tide_delete_config('field.storage.media.' . $field_name, [], TRUE);
    }
  }
}
